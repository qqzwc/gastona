/*
   //(o) gastonaDoc_source notesDevelopment_sqlite

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    z Notes about development
   <name>       " 2-SQL and sqlite"
   <groupInfo>
   <javaClass>
   <importance> 2
   <desc>       //SQl and sqlite

   <help>
      //
      //   Some things has to be take into account if wanted to work with SQL, sqlite and Gastona
      //
      //   Notes about general SQL and sqlite
      //   -----------------------------------
      //
      //    - sqlite uses a standard SQL but with some little differences (see www.sqlite.org documentation)
      //
      //    - Several names are reserved and CANNOT be used as field names (e.g. group, count ...)
      //
      //    - Table or view names starting with "sqlite" are reserved for internal use (e.g. sqlite_master)
      //
      //    - A column can accept either text values or numeric ones, the comparison and sorting order
      //      of these values may differ being not proper (not always numeric). To ensure the right
      //      comparison and/or sorting order in numeric columns, it is enough to make an addition of
      //      a zero value, for instance
      //
      //             SELECT .... WHERE (myNumer+0 > 100) ...
      //             SELECT .... ON (myNumer+0 = myResult+0) ...
      //             SELECT .... ORDER BY myNumer+0 DESC
      //
      //    - When the time consumption of a query is high, it does not mean that the database engine
      //      performance is bad, the most times it indicates that the queries has to be optimized.
      //      For instance by creating the proper indexes in the queried tables and/or using auxiliary
      //      tables etc.
      //
      //   Notes about Gastona and sqlite
      //   -----------------------------------
      //
      //    All select queries made through gastona scripts may be sent without worrying about limitation
      //    of records since a windowing of the records is performed automatically. For example, if a table
      //    contains millions of records we still are able to set the sql to "SELECT * FROM tablename"
      //    since it will produce only few records to be loaded, the rest will be retrieved automatically
      //    on demand (e.g. when scrolling the table or when moving forward within a loop).
      //
      //    Right now all sql functionallity in Gastona in widgets as well as in listix commands is
      //    implemented in batch mode, that means that for each query the sqlite command line executable
      //    is invoked. This drive to some limitations using sqlite native temporary tables (TEMP TABLE)
      //    since these tables will only persist one call. But instead default databases can be created
      //    and used as convenient. For more information read the listix command DATABASE CONFIG documentation.
      //
      //    --- Storing multi line texts and special characters -----
      //
      //    Gastona use a special coding for texts containing special chararcters like ', |, return,
      //    line feed etc. Coding and decoding is made internally on adding records and querying them,
      //    therefore it should be transparent for the application unless you add or retrieve information
      //    from the database using other programs (including sqlite.exe)
      //    It is possible to switch the encoding schema, for example to "UTF-8", by using the listix command
      //    DATABASE CONFIG, ENCODING.
      //

   <examples>
      gastSample


#**FIN_EVA#

*/


REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED
REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED
REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED
REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED REMOVED



      //    --- Session temporary database -----
      //
      //    In order to facilitate working with temporary tables Gastona attach on every query a
      //    session temporary database which has the alias "sessionTmpDB". This database is created once
      //    on the first query and is deleted when finishing the application. The whole name, if needed,
      //    can be requested using the property "gastona.sessionTmpDB", that is using the variable
      //
      //       @<:sys gastona.sessionTmpDB>
      //
      //    --- Default database -----
      //
      //    Usually you have to specify on every query which database is to be used. This is done in
      //    widgets through the attribute "dbName" and in Listix commands through an argument. If the
      //    application uses just one database, the script can be simplified being not necessary to
      //    specify the database name at all. Every query that has no database associated or its name
      //    is an empty string use the same database which can be found in the property "gastona.defaultDB"
      //
      //       @<:sys gastona.defaultDB>
      //
      //    this property can be set using the command SET PROP. In case the variable is not set by the
      //    application, it is assumed that a temporary database is wanted, then it is created(*) and the
      //    name is stored automatically into the property.
      //    When using two or more databases, only one can be referenced as default, the rest has to
      //    be explicity given.
      //
      // (*) Note that defaultDB, even if temporary, is not the same as sessionTmpDB. The first one is
      //     a database that all queries that do not specify database name will use, while the second
      //     one is a temporary database that every query (specifying or not database name) can use
      //     through the alias "sessionTmpDB".
      //

