/*
   //(o) gastonaDoc_source notesDevelopment_sqlite

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    z Notes about development
   <name>       " 2-SQL and sqlite"
   <groupInfo>
   <javaClass>
   <importance> 2
   <desc>       //SQl and sqlite

   <help>
      //
      //   Some things has to be take into account if wanted to work with SQL, sqlite and Gastona
      //
      //   Notes about general SQL and sqlite
      //   -----------------------------------
      //
      //    - sqlite uses a standard SQL but with some little differences (see www.sqlite.org documentation)
      //
      //    - Several names are reserved and CANNOT be used as field names (e.g. group, count ...)
      //
      //    - Table or view names starting with "sqlite" are reserved for internal use (e.g. sqlite_master)
      //
      //    - A column can accept either text values or numeric ones, the comparison and sorting order
      //      of these values may differ being not proper (not always numeric). To ensure the right
      //      comparison and/or sorting order in numeric columns, it is enough to make an addition of
      //      a zero value, for instance
      //
      //             SELECT .... WHERE (myNumer+0 > 100) ...
      //             SELECT .... ON (myNumer+0 = myResult+0) ...
      //             SELECT .... ORDER BY myNumer+0 DESC
      //
      //    - If a query takes long time to execute, try to optimize it or choose proper indexes in the affected tables.
      //
      //   Notes about Gastona and sqlite
      //   -----------------------------------
      //
      //    All select queries made through gastona scripts may be sent without worrying about limitation
      //    of records since a windowing of the records is performed automatically. For example, if a table
      //    contains millions of records we still are able to set the sql to "SELECT * FROM tablename"
      //    since it will produce only few records to be loaded, the rest will be retrieved automatically
      //    on demand (e.g. when scrolling the table or when moving forward within a loop).
      //
      //    SQL functionallity in Gastona in widgets as well as in listix commands is
      //    implemented in batch mode(*). That means that for each query the sqlite command line executable
      //    is invoked. This drive to some limitations using sqlite native temporary tables (TEMP TABLE)
      //    since these tables will only persist one call. But instead default databases can be created
      //    and used as convenient. For more information read the listix command DATABASE CONFIG documentation.
      //
      //    (*) this is not the case for Gastona for Android (apk) which cannot use this approach due to android
      //        policies on the execution of binaries (for security). Here the java sqlite API is used instead.
      //        This has the severe limitation that more than one query at a time cannot be executed.
      //
      //    --- Storing multi line texts and special characters -----
      //
      //    Gastona use a special coding for texts containing special chararcters like ', |, return,
      //    line feed etc. Coding and decoding is made internally on adding records and querying them,
      //    therefore it should be transparent for the application unless you add or retrieve information
      //    from the database using other programs (including sqlite.exe)
      //    It is possible to switch the encoding schema, for example to "UTF-8", by using the listix command
      //    DATABASE CONFIG, ENCODING.
      //
      //    --- Default database and aliases -----
      //
      //    Widgets that can work with databases have an attribute called "dbName" to specify the database
      //    to work with. Also listix commands can give the database name by argument in those commands that use SQL.
      //    
      //    Nevertheless since for many scripts a single database is enough it worth to have some way of setting 
      //    a default database which will be used when dbName is not specified. This is done with the command DB CONFIG
      //    for example
      //
      //          DB CONFIG, DEFAULT, mydbdefault.db
      //
      //     this name can be also queried using the property gastona.defaultDB, for example
      //
      //          //default database is @<:sys gastona.defaultDB>
      //
      //    If no default database is set and some widget or command also do not specify the dbName then 
      //    gastona will create a temporary database transparently and use it as default. This database will 
      //    be removed when finishing the gastona script.
      //

   <examples>
      gastSample


#**FIN_EVA#

