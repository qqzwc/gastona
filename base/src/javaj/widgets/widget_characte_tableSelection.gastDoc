/*
   //(o) gastonaDoc_source javaj_intro

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    javaj_widget_General characteristics
   <name>       Table selection
   <groupInfo>
   <javaClass>
   <importance> 8
   <desc>       //Selection of row(s) on table data

   <help>
      //
      //    Attributes: selected.COLUMNNAME, subTableSelection
      //    Messages  : "", "2"  (empty message for selection and 2 for double click)
      //
      //    The widgets that have this attribute have its data based on a table where the records
      //    can be selected. Once the user select one record, can also be multi selection, a message
      //    whith the name of the widget is sent, at this time the attributes are filled by the widget.
      //
      //    The attribute 'subTableSelection' contains an Eva table with all columns of all selected
      //    records, it is therefore a subtable with the whole selection. It can be accessed, for instance,
      //    using a loop.
      //
      //    A single selection, or the first selection in case of multi selection, produces a set of
      //    attributes 'selected.COLUMNNAME', as many as columns has the table. These attributes contains
      //    actually the same information as the first record of the attribute 'subTableSelection', simply
      //    they are splited in separate variables for convenience.
      //
      //    These attributes works the same for Eva or database tables and cover all columns of them
      //    regardless of they are visible or not.
      //
      //    Example:
      //
      //          Supose a widget 'tMyTable' with three columns and following data
      //
      //             <tMyTable>
      //                id , name  , city
      //                01 , BCN   , Barcelona
      //                02 , HAM   , Hamburg
      //                03 , STR   , Stuttgart
      //                04 , SXF   , Berlin
      //                05 , SZG   , Salzburg
      //
      //
      //          Selecting the rows 01, 03 and 05 will produce the attributes
      //
      //             <tMyTable selected.id>     01
      //             <tMyTable selected.name>   BCN
      //             <tMyTable selected.city>   Barcelona
      //
      //             <tMyTable subTableSelection>
      //                id , name  , city
      //                01 , BCN   , Barcelona
      //                03 , STR   , Stuttgart
      //                05 , SZG   , Salzburg
      //
      //          Reacting to the selection and accesing these attributes can be done in different
      //          ways, for example
      //
      //          <-- tMyTable>
      //               // your first selected destination is @<tMyTable selected.city>
      //               // All selected destinations:
      //               LOOP, EVA, tMyTable subTableSelection
      //                   ,, //@<city> (@<name>)
      //
      //   Note that multi selection through the attribute 'subTableSelection' has the drawback of
      //   memory consuming. This can be inacceptable for big selections, for example in a database
      //   table the user could make a selection of millions of rows just with two clicks. For this
      //   reason 'subTableSelection' is limited to 1000 rows.
      //
      //
      //   ==== Programatically selection: message "select!"
      //
      //   Usually the selection is performed by the user with the mouse but it can also be done
      //   using the message "select!". This message has, at least, two parametres
      //
      //       widgetName select!, columnName, value, value, ...
      //
      //   where column name is either the column through which we are going to select records by giving
      //   values, or # for selecting by index (0 based), or #1 for 1 based
      //
      //   For example, the message
      //
      //       MSG, tMyTable select!, #1, 2, 4
      //
      //    will select the records 2 and 4 (index 1 based), and
      //
      //       MSG, tMyTable select!, city, Barcelona, Stuttgart
      //
      //    will select the first records with city content "Barcelona" and "Stuttgart"
      //
      //    Note that this selection will only works with the records in memory, therefore it should only
      //    be used for small tables.


   <examples>
      gastSample

      selecting rows sample
      selecting rows sample2
      widgetsTableModel

   <selecting rows sample>
      //#javaj#
      //
      //    <frames> F, Selecting rows sample
      //
      //    <layout of F>
      //          EVA, 10, 10, 7, 7
      //         , X
      //         , lChoose destination
      //      X  , tDestination
      //         , oSal
      //
      //#data#
      //
      //    <tDestination>
      //       id , name  , city
      //       01 , BCN   , Barcelona
      //       02 , HAM   , Hamburg
      //       03 , STR   , Stuttgart
      //       04 , SXF   , Berlin
      //       05 , SZG   , Salzburg
      //
      //#listix#
      //
      //    <-- tDestination>
      //       //
      //       // First selected destination is @<tDestination selected.city>
      //       // All selected destinations:
      //       //
      //       LOOP, EVA, tDestination subTableSelection
      //           ,, //   @<city> (@<name>)
      //


   <selecting rows sample2>
      //#javaj#
      //
      //    <frames> F, Selecting rows sample2
      //
      //    <layout of F>
      //          EVA, 10, 10, 7, 7
      //         , X
      //         , lChoose destination
      //      X  , tDestination
      //         , lChosen destinations
      //         , iChosenList
      //
      //#data#
      //
      //    <tDestination>
      //       id , name  , city
      //       01 , BCN   , Barcelona
      //       02 , HAM   , Hamburg
      //       03 , STR   , Stuttgart
      //       04 , SXF   , Berlin
      //       05 , SZG   , Salzburg
      //
      //   <iChosenList var> tDestination subTableSelection
      //   <iChosenList visibleColumns> city
      //
      //#listix#
      //
      //   <-- tDestination>
      //      MSG, iChosenList data!


   <widgetsTableModel>
      //#javaj#
      //
      //   <frames> main, Widgets wit table data model
      //
      //   <layout of main>
      //      EVA, 10, 10, 4 , 4
      //
      //         ,  A, X
      //         , lA table, lA list
      //         , tTabla, iLlista
      //         , layBotons, -
      //       X , oConso, -
      //         , layDumpsel, -
      //
      //   <layout of layBotons>
      //      EVA, 4, 4, 6, 6
      //         ,             ,      , X,             ,         , X,
      //         , lA combo box, cCaixa,  ,lA radio group, rgRadio,  , lA checkbox group, kgCheck
      //
      //   <layout of layDumpsel>
      //      EVA, 4, 4, 6, 6
      //         ,
      //         , lDump variables, rgDumpsel
      //
      //#data#
      //
      //   <rgRadio var> thetable
      //   <rgRadio orientation> X
      //
      //   <kgCheck var> thetable
      //   <kgCheck orientation> X
      //
      //   <tTabla var> theTable
      //
      //   <cCaixa var> theTable
      //   <cCaixa visibleColumns> name
      //
      //   <iLlista var> theTable
      //   <iLlista visibleColumns> desc
      //
      //   <thetable>
      //      label, id, name, desc
      //
      //      BCN, 1002, Barcelona, //Y que le voy a hacer si yo nací en Barcelona
      //      HAM, 6671, Hamburg  , //Speicherstadt
      //      SEL, 1717, Seoul    , //Gangam
      //
      //    <rgDumpsel orientation> X
      //    <rgDumpsel>
      //      label        , id     , selected
      //      all          ,        , 1
      //      table        , tTabla
      //      list         , iLlista
      //      combobox     , cCaixa
      //      radio buttons, rgRadio
      //      checkboxes   , kgCheck
      //
      //#listix#
      //
      //   <-- rgRadio>    LSX, show
      //   <-- kgCheck>    LSX, show
      //   <-- tTabla>     LSX, show
      //   <-- cCaixa>     LSX, show
      //   <-- iLlista>    LSX, show
      //
      //   <-- rgDumpsel>  LSX, show
      //
      //   <show>
      //      MSG, oConso clear
      //      DUMP, data, , @<rgDumpsel selected.id>

#**FIN_EVA#

*/
