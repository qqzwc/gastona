/*
   //(o) WelcomeGastona_source_javaj_layout EVALAYOUT

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    listix
   <name>       " Primitive variables"
   <groupInfo>
   <javaClass>  listix.listix
   <importance> 6
   <desc>       //Listix primitive variables

   <help>
      //
      //   Listix primitive variables are a special set of read only variables
      //   that start always with colon (:). On each invocation the variables are evaluated
      //   using an internal listix function.
      //
      //   There are three main groups of listix primitives
      //
      //   --- System properties, start with ":sys" or ":prop"
      //
      //    Any system property can be read using the variable syntax
      //
      //      @<:sys javaProperty> or @<:prop javaProperty>
      //
      //      Returns the value of the java property 'javaProperty', see java documentation
      //      of java.util.Properties for more information about java Properties.
      //
      //      Example:
      //
      //            //user @<:sys user.name> has the home directory @<:sys user.home>
      //
      //   --- Listix primitives, start with ":listix" or ":lsx"
      //
      //    There are several syntaxes, all of them usually reporting system information
      //    or listix state information.
      //
      //      @<:lsx DATE [pattern]>
      //
      //          Returns the current date and time using the pattern if given, if not
      //          the default pattern is "dd.MM.yyyy hh:mm".
      //          See documentation of java class java.text.SimpleDateFormat for more information
      //          about Date patterns.
      //          Three typical standard patterns for use in datatabases are facilitated with a number
      //          after date:
      //
      //           date0 for the pattern "yyyy-MM-dd"
      //           date1 for the pattern "yyyy-MM-dd HH:mm:ss"
      //           date2 for the pattern "yyyy-MM-dd HH:mm:ss S"
      //
      //          Example:
      //            //today is @<:lsx date>, specifically @<:lsx date2>
      //
      //      @<:lsx CLOCK[x]>
      //
      //          Returns the count of an internal clock in milliseconds from the beginnig of the application ("CLOCK")
      //             CLOCK0 : epoch time in milliseconds from 1970-01-01
      //             CLOCK1 : epoch time in milliseconds of the start of the application
      //             CLOCK  : ellapsed time in milliseconds since start of the application
      //
      //      @<:lsx TMP [extension]>
      //
      //          Creates and returns the path name of a temporary file with the given extension.
      //          The normal use of this variable is with the command SET VAR to set the returned
      //          name in an own variable.
      //
      //          Example:
      //            SET VAR, myTempHtml, @<:lsx TMP html>
      //
      //      @<:lsx defaultTmpDB>
      //
      //         Returns the default temporary database used by Listix as full path. The only act of
      //         invoquing this variable ensures that the database exists since it will be created if
      //         not already done. Each Listix generation, that is the main Listix or when calling the
      //         commands GENERATE or LISTIX, might use if needed a temporary database. This database
      //         is used on commands related with databases where the database name is not given
      //         (empty string). Note that each call to GENERATE or LISTIX might create a different
      //         default database.
      //
      //      @<:lsx host name>
      //
      //         Returns (or tries to return) the host name
      //
      //      @<:lsx host nameupper>
      //
      //         Returns (or tries to return) the host name in upper case
      //
      //      @<:lsx host ip>
      //
      //         Returns (or tries to return) the host IP address
      //
      //      @<:lsx ROWS>
      //
      //         Returns the total count of rows of the current active loop (see LOOP, an RUN LOOP
      //         commnads).
      //
      //      @<:lsx ROW>
      //
      //         Returns the current row (starting by 0) of the current active loop (see LOOP, an RUN LOOP commnads).
      //
      //      @<:lsx FIRSTROW>
      //
      //         Returns 1 if @<:lsx ROW> is the first one (0)
      //
      //      @<:lsx LASTROW>
      //
      //         Returns 1 if @<:lsx ROW> is the last one (@<:lsx ROWS> - 1)
      //
      //      @<:lsx paramcount>
      //
      //         Returns the current number of parameters of either the main call (command
      //         line call of gastona) or the most recent call to LISTIX or GENERATE with parameters.
      //
      //      @<:lsx screenX>
      //
      //         Returns the width in pixels of the whole screen
      //
      //      @<:lsx screenY>
      //
      //         Returns the height in pixels of the whole screen
      //
      //      @<:lsx uuid>
      //
      //         Generates an immutable universally unique identifier (UUID). A UUID represents a 128-bit value.
      //
      //      @<:lsx mutool MICROTOOL>
      //
      //         Returns the full path of the executable related with the microtool 
      //
      //   --- Convert or process content of a variable or literal (e.g. file name)
      //
      //      This syntax permit making complex processes to the contents of a variable or
      //      file. For example
      //
      //          @<:encode-utf8 myText>
      //
      //           will encode in UTF-8 the contents of the variable myText
      //
      //          @<:infile jGastonaEva-min.js>
      //
      //           will include the given file as text
      //
      //      All these primitives have the syntax
      //
      //          @<:OPERATION TARGET>
      //
      //       where TARGET is the name of the eva variable or file name in case of primitive "infile"
      //       which content will be processed with the OPERATION, returning usually a string.
      //
      //       OPERATION still has the syntax
      //
      //          [OPT-]PRIMITIVE[-PARAM]
      //
      //       here are listed all supported primitives, its posible options and parameters
      //
      //          PRIMITIVE         OPTIONS            PARAMETERS
      //          ---------------   --------------     ------------------
      //          hex
      //          infile            check, solve/raw
      //          path                                 win, linux, os
      //          encode            check, solve/raw   strjs, regex, html, latex(*) or utf8, iso-8859-1 and any other accepted by java.net.URLDecoder
      //          decode            check, solve/raw   strjs, regex, html, latex(*) or utf8, iso-8859-1 and any other accepted by java.net.URLDecoder
      //          xorencrypt        check, solve/raw
      //          --nothing--       check, solve/raw
      //
      //          (*) strjs escape the special characters ' " and \ using the C,C++,java and js style, for example '"\ will be encoded as \'\"\\
      //              regex escape some special regex characters like \()[]"./  for example hello("you") will be encoded as hello\(\"you\"\)
      //              html and latex may be incomplete, use it with care or some javascript function instead (command goRhino)
      //
      //       option check (or silent):
      //              If given and the target (variable or file) does not exists then it returns an empty string and
      //              no error will be triggered (silent).
      //
      //       option solve / raw:
      //              By default the contents of the variable is treated as plain text (raw) so no variable solving (@<..>) will be
      //              performed unless the option "solve" is explicitly given. "raw" can be omited since it is the default option.
      //
      //       --nothing--
      //              If no primitive is given then simply the variable will be returned, this make sense if some options are
      //              given, for example
      //
      //             @<:raw myVar> or @<:check-solve myVar>
      //
      //             Note that @<:solve myVar> is equivalent to @<myVar>
      //
      //      Primitives:
      //
      //      @<:hex hexString>
      //
      //          convert to bytes the hexString where every byte is given by 2 characters.
      //
      //         Example:
      //
      //             @<:hex 09>
      //
      //          whill print a tabulator
      //
      //      @<:infile filename>
      //
      //         Important! fileName is the name itself not a variable
      //         Behaves as if the entired given file where into a listix variable. It is similar to the listix command "IN FILE"
      //         but here the default behavior here is "raw" = not solving variables
      //
      //         Example:
      //
      //             @<:infile META-GASTONA/js/jGastonaEva-min.js>
      //
      //             which would be the same as
      //
      //             IN FILE, META-GASTONA/js/jGastonaEva-min.js
      //                    , SOLVE, 0
      //
      //      @<:path varWithPath>
      //
      //       Replaces the path delimiters of the path contained in the variable varWithPath
      //       with the ones appropiated to the current operative system (mainly windows or not windows)
      //
      //      @<:encode-CODE var>
      //      @<:decode-CODE var>
      //
      //       Encode or decode the contents of the variable named "var" using the encoding model CODE
      //       which can be one of html (basic), latex (basic) or utf-8, iso-8859-1 and any other accepted by java.net.URLDecoder
      //       CODE might be empty as well, in this case an internal gastona encoding model used by default for sqlite
      //       texts will be used.
      //
      //          Example:
      //
      //            @<:encode-utf8 myVar>
      //
      //       @<:xorencrypt var>
      //
      //         Perform a xor encryption using the key given in the property gastona.xorEncryptKey. See also the syntax
      //         XOR ENCRYPT of the listix command STRCONV
      //
      //          Example:
      //
      //             @<:xorencrypt myText>
      //
      //            this is equivalent to the listix command
      //
      //             STRCONV, XOR ENCRYPT, @<:sys gastona.xorEncryptKey>, -1, -1, -1
      //                    , IN VAR, myText
      //



   <examples>
      gastSample

      example listix primitives
      example java system properties

   <example listix primitives>
      //#javaj#
      //
      //   <frames>
      //      F, "example listix primitives"
      //
      //   <layout of F>
      //      EVA, 10, 10, 6, 6
      //
      //        , X
      //      X , oConsole
      //
      //#listix#
      //
      //   <main0>
      //      //
      //      // lsx primitives sample
      //      //
      //      //
      //      LOOP, EVA, primitivas
      //          ,, // @<desc> : [@<var>]
      //
      //   <primitivas>
      //      desc                                , var
      //      number of rows in the current table , @<:lsx ROWS>
      //      current row of the current table    , @<:lsx ROW>
      //      default lsx current date            , @<:lsx date>
      //      standard 0 current date             , @<:lsx date0>
      //      standard 1 current date             , @<:lsx date1>
      //      standard 2 current date             , @<:lsx date2>
      //      formated date                       , //@<:lsx date h 'o''clock' a, zzzz>
      //      system property user                , @<:sys user.name>
      //      system property home                , @<:sys user.home>
      //      system current directory            , @<:sys user.dir>
      //      system property temp dir            , @<:sys java.io.tmpdir>
      //      system property file separator      , @<:sys file.separator>

   <example java system properties>
      //#javaj#
      //
      //   <frames>
      //      F, "example java system properties"
      //
      //   <layout of F>
      //      EVA, 10, 10, 6, 6
      //
      //        , X
      //      X , oConsole
      //
      //#listix#
      //
      //   <main0>
      //      //
      //      // java system properties
      //      //
      //      //
      //      LOOP, EVA, propertyList
      //          ,, // @<sysvar>: @<desc>
      //          ,, //     @<@><:sys @<sysvar>> [@<varValue>]
      //          ,, //
      //
      //	<varValue>
      //		LSX, //:sys @<sysvar>
      //
      //
      //   <propertyList>
      //      sysvar         , desc
      //      file.encoding, //The character encoding for the default locale
      //      file.encoding.pkg, //The package that contains the converters that handle converting between local encodings and Unicode
      //      file.separator, //The platform-dependent file separator (e.g., "/" on UNIX, "\" for Windows)
      //      java.class.path, //The value of the CLASSPATH environment variable
      //      java.class.version, //The version of the Java API
      //      java.compiler, //The just-in-time compiler to use, if any. The java interpreter provided with the JDK initializes this property from the environment variable JAVA_COMPILER.
      //      java.home, //The directory in which Java is installed
      //      java.io.tmpdir, //The directory in which java should create temporary files
      //      java.version, //The version of the Java interpreter
      //      java.vendor, //A vendor-specific string
      //      java.vendor.url, //A vendor URL
      //      line.separator, //The platform-dependent line separator (e.g., "\n" on UNIX, "\r\n" for Windows)
      //      os.name, //The name of the operating system
      //      os.arch, //The system architecture
      //      os.version, //The operating system version
      //      path.separator, //The platform-dependent path separator (e.g., ":" on UNIX, "," for Windows)
      //      user.dir, //The current working directory when the properties were initialized
      //      user.home, //The home directory of the current user
      //      user.language, //The two-letter language code of the default locale
      //      user.name, //The username of the current user
      //      user.region, //The two-letter country code of the default locale
      //      user.timezone, //The default time zone


#**FIN_EVA#

*/
